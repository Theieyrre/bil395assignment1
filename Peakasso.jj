// 161101018-Mustafa Ünal , 141101041-Ali Berk Sýðýn
PARSER_BEGIN(Peakasso)
import java.util.*;

public class Peakasso {
    public static ArrayList<Brush> brushList = new ArrayList<Brush>();
    public static int canvasX, canvasY, cursorX, cursorY;
    public static char[][] canvas;
    public static void main(String args[]) throws ParseException {
        Peakasso parser = new Peakasso(System.in);
        parser.Parse();
    }
}

PARSER_END(Peakasso)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
< SEMICOLON: ";" >
|< PROGRAM: "PROGRAM" >
|< CANVASINITSECTION: "CANVAS-INIT-SECTION :" >
|< BRUSHDECLARATIONSECTION: "BRUSH-DECLARATION_SECTION :" >
|< DRAWINGSECTION: "DRAWING-SECTION :" >
|< COMMA: "," >
|< ASSIGNMENT: "=" >
|< CONST: "CONST" >
|< CANVASX: "canvasX" >
|< CANVASY: "canvasY" >
|< CURSORX: "cursorX" >
|< CURSORY: "cursorY" >
|< BRUSH: "BRUSH" >
|< RENEWBRUSH: "RENEW-BRUSH" >
|< MOVE: "MOVE" >
|< PAINTCANVAS: "PAINT-CANVAS" >
|< EXHIBITCANVAS: "EXHIBIT-CANVAS" >
|< TO: "TO" >
|< PLUS: "PLUS" >
|< MINUS: "MINUS" >
}

TOKEN :
{
<IDENTIFIER: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z", "0"-"9"])* >
|<MESSAGE: "'"(~["\n"])*"'">
|<INTLIT: ("+"|"-")(["0"-"9"])* >
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "!!" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

void Parse() :
{}
{
<PROGRAM> <IDENTIFIER> <SEMICOLON>
CanvasInitSection()
BrushDeclarationSection()
DrawingSection()
ExhibitCanvas()<SEMICOLON>
<EOF>
}

void CanvasInitSection() :
{Token t1=null, t2=null, t3=null, t4=null;}
{
<CANVASINITSECTION>
  <CONST><CANVASX><ASSIGNMENT>(t1=<INTLIT> {
  if(Integer.parseInt(String.valueOf(t1)) < 5 || Integer.parseInt(String.valueOf(t1)) > 200) {
    System.out.println("Canvas X axis is out of max range.Converting to 100");
    canvasX = 100;
  }else
  	canvasX = Integer.parseInt(String.valueOf(t1));
  }<SEMICOLON><CONST><CANVASY><ASSIGNMENT> t2=<INTLIT> {
  if(Integer.parseInt(String.valueOf(t2)) < 5 || Integer.parseInt(String.valueOf(t2)) > 200) { 
  	System.out.println("Canvas Y axis is out of max range.Converting to 100");
  	canvasY = 100;
  }else
  	canvasY = Integer.parseInt(String.valueOf(t2));
  }<SEMICOLON><CONST><CURSORX><ASSIGNMENT>(t3=<INTLIT>) {
	cursorX = Integer.parseInt(String.valueOf(t3));
	//Canvas dÄ±ÅŸÄ± kontrolÃ¼?
  }<SEMICOLON><CONST><CURSORY><ASSIGNMENT>(t4=<INTLIT>) {
	cursorY = Integer.parseInt(String.valueOf(t4));
  }<SEMICOLON>) { canvas = new char[canvasY][canvasX];}
}

void BrushDeclarationSection() :
{Token t5=null,i1=null,i2=null;}
{
<BRUSHDECLARATIONSECTION>
<BRUSH>
(t5=<IDENTIFIER>i1=<INTLIT>i2=<INTLIT> {
	Brush br = new Brush(i1,i2);
	brushList.add(br);
})*<SEMICOLON>
}

void DrawingSection() :
{Token t6=null,t7 = null,t8 = null, op = null, t9=null;}
{
<DRAWINGSECTION>
(  (<MOVE>(t7=<CURSORX> | t7=<CURSORY>) <TO>(t8=<INTLIT> | t8=<CURSORX> | t8=<CURSORY>) (op=<PLUS> | op=<MINUS>) (t9=<INTLIT> | t9=<CURSORX> | t9=<CURSORY>)<SEMICOLON>))
 
{
	int operand1, operand2;
	t8 = (String)t8; t9 = (String)t9;
	try {
	  operand1 = Integer.parseInt(t8);
	}
	catch(NumberFormatException nfe) {
	  if(t8.equals("cursorX"))
		operand1 = cursorX;
	else
		operand1 = cursorY;
	}

	try {
	  operand1 = Integer.parseInt(t8);
	}
	catch(NumberFormatException nfe) {
	  if(t8.equals("cursorX"))
		operand1 = cursorX;
	else
		operand1 = cursorY;
	}

  	if(t7.equals("cursorX")) 
		if(op.equals("PLUS"))
			cursorX = operand1 + operand2;
		else
			cursorX = operand1 - operand2;
	else
		if(op.equals("PLUS"))
			cursorY = operand1 + operand2;
		else
			cursorY = operand1 - operand2;
}
|  (<PAINTCANVAS>t6=<IDENTIFIER> {
  	int index = brushIsDeclared(t6);
	if(index > 0){
        System.out.println("Variable \""+t6.image+"\" is not declared, exiting compiler.");
        System.exit(0);
    }else {
      Brush br = brushlist.get(index);
      for(int i=0;i<br.getHeight();i++)
      	for(int j=0;j<br.getWidth();j++)
      		canvas[cursorY+j][cursorX+i] = '*';
  	}
  })*
}

JAVACODE
int brushIsDeclared(Token t) {
    Brush br1 = new Brush(t.toString());
    for(int i=0; i<brushList.size(); i++){
        Brush br2 = (Brush)brushList.get(i);
        if(br1.name.equals(br2.name))
            return i;
    }
    return -1;
}

JAVACODE
int ExhibitCanvas() {
	for(int i=0;i<canvas.length;i++) { 
		for(int j=0;j<canvas[0].length;j++)
			System.out.print(canvas[i][j]);
		System.out.println("");
	}			
}
